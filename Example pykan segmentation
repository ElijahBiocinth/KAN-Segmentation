#### for https://github.com/KindXiaoming/pykan/tree/master

import cv2
import numpy as np
import torch
import torchvision
from kan import KAN
import matplotlib.pyplot as plt
from torch.utils.data import Dataset, DataLoader
from sklearn.model_selection import train_test_split
from torchvision import transforms
import os

# Установка устройства
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

def preprocess_data(data):
    images = []
    labels = []
    for i, name in enumerate(data):
        path = train_path + name
        img_real = cv2.imread(path+'/images/'+ name +'.png')
        img_real = cv2.resize(img_real, (128, 128))
        img_real = img_real.flatten() / 255.0  # Преобразование в одномерный вектор и нормализация
        images.append(img_real)

        img_segment_full = np.zeros((128, 128), dtype=bool)
        segment_path = path+'/masks/'
        for name in os.listdir(segment_path):
            img_segment = cv2.imread(segment_path + name, 0)
            img_segment = cv2.resize(img_segment, (128, 128))
            img_segment_full = np.maximum(img_segment_full, img_segment)
        labels.append(img_segment_full.flatten().astype(np.float32))  # Преобразование в одномерный вектор
    return np.array(images), np.array(labels)

# Load dataset
train_path = "/home/jovyan/dapi/cell_nuclei/"
train_dir = os.listdir(train_path)

train_images, train_labels = preprocess_data(train_dir)
test_images, test_labels = preprocess_data(train_dir)  # Используем тот же набор данных для теста

dataset = {
    "train_input": torch.from_numpy(train_images).float(),
    "train_label": torch.from_numpy(train_labels).float(),
    "test_input": torch.from_numpy(test_images).float(),
    "test_label": torch.from_numpy(test_labels).float(),
}

model = KAN(width=[128*128*3, 16, 128*128], device=device)
model.to(device)

results = model.train(
    dataset,
    opt="Adam",
    lr=0.05,
    steps=10,
    batch=1,
    loss_fn=torch.nn.BCEWithLogitsLoss(),
)
# Сохранение модели
torch.save(model.state_dict(), "kan.pth")

# Загрузка модели и тестирование
model = KAN(width=[128*128*3, 16, 128*128], device=device)
model.load_state_dict(torch.load("kan.pth"))

def test_acc():
    with torch.no_grad():
        predictions = torch.argmax(model(dataset["test_input"]), dim=1)
        correct = (predictions == dataset["test_label"]).float()
        accuracy = correct.mean()
    return accuracy

acc = test_acc()
print(f"Test accuracy: {acc.item() * 100:.2f}%")

plt.plot(results["train_loss"], label="train")
plt.plot(results["test_loss"], label="test")
plt.legend()
plt.savefig("kan.png")
